<?php

namespace portalium\workspace\components;

use portalium\site\models\Setting;
use portalium\workspace\models\WorkspaceUser;
use Yii;
use yii\base\BaseObject;

class TriggerActions extends BaseObject
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }
    /* 
        public function onUserDeleteBefore($event)
        {
            ['id' => $id_user, 'default_user' => $defaultUser, 'action' => $action] = $event->payload;
            if ($action == 'delete') {
                $workspaces = Workspace::find()->where(['id_user' => $id_user])->all();
                foreach ($workspaces as $workspace) {
                    $workspace->delete();
                }
                

            }elseif($action == 'transfer'){
                if ($defaultUser) {
                    $workspaces = Workspace::find()->where(['id_user' => $id_user])->all();
                    foreach ($workspaces as $workspace) {
                        $workspace->id_user = $defaultUser;
                        $workspace->save();
                    }
                }
            }
        }
     */

    public function onRoleDeleteBefore($event)
    {
        ['item' => $item] = $event->payload;

        $this->deleteWorkspaceUserRoles($item->name);
    }

    private function deleteWorkspaceUserRoles($roleName)
    {
        $workspaceUserRoles = WorkspaceUser::find()->where(['role' => $roleName])->all();

        foreach ($workspaceUserRoles as $workspaceUserRole) {
            $workspaceUserRole->delete();
        }
    }

    public function onRoleUpdateBefore($event)
    {
        ['item' => $item, 'oldItem' => $oldItem] = $event->payload;


        $this->updateWorkspaceUserRoles($item->name, $oldItem->name);
    }

    private function updateWorkspaceUserRoles($roleName, $oldRoleName)
    {
        $workspaceUserRoles = WorkspaceUser::find()->where(['role' => $oldRoleName])->all();

        foreach ($workspaceUserRoles as $workspaceUserRole) {
            $workspaceUserRole->role = $roleName;
            $workspaceUserRole->save();
        }
    }

    public function onSettingUpdateAfter($event)
    {
        ['data' => $data, 'changedAttributes' => $changedAttributes] = $event->payload;

        if($data['name'] == 'workspace::available_roles'){
            $oldRoles = [];
            if(isset($changedAttributes['value']) && is_array($changedAttributes['value'])){
                foreach (json_decode($changedAttributes['value']) as $module => $roles) {
                    foreach ($roles as $role) {
                        $oldRoles[] = $role;
                    }
                }
            }
            $newRoles = [];
            if(isset($data['value']) && is_array($data['value'])){
                foreach (json_decode($data['value']) as $module => $roles) {
                    foreach ($roles as $role) {
                        $newRoles[] = $role;
                    }
                }
            }

            $deletedRoles = array_diff($oldRoles, $newRoles);
            if($deletedRoles){
                foreach ($deletedRoles as $role) {
                    $checkRolesWorkspaceUser = WorkspaceUser::find()->where(['role' => $role])->all();
                    if($checkRolesWorkspaceUser){
                        $settingModel = Setting::findOne(['name' => 'workspace::available_roles']);
                        $settingModel->value = $changedAttributes['value'];
                        $settingModel->save();
                        Yii::$app->session->addFlash('error', Yii::t('workspace', 'You can not delete this role because it is used in workspace.'));
                        break;
                    }
                }
            }
            
        }
    }
}